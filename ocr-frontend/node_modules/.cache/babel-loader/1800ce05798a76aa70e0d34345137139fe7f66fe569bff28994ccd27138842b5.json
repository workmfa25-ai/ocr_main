{"ast":null,"code":"/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffWords = diffWords;\nexports.diffWordsWithSpace = diffWordsWithSpace;\nexports.wordDiff = void 0;\n\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/\n_base = _interopRequireDefault(require(\"./base\"))\n/*istanbul ignore end*/;\nvar /*istanbul ignore start*/\n_params = require(\"../util/params\")\n/*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\n/*istanbul ignore end*/\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new /*istanbul ignore start*/\n_base\n/*istanbul ignore end*/[/*istanbul ignore start*/\n\"default\"\n/*istanbul ignore end*/]();\n\n/*istanbul ignore start*/\nexports.wordDiff = wordDiff;\n\n/*istanbul ignore end*/\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\nwordDiff.tokenize = function (value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n  return tokens;\n};\nfunction diffWords(oldStr, newStr, options) {\n  options = /*istanbul ignore start*/\n  (0, /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _params\n  /*istanbul ignore end*/. /*istanbul ignore start*/\n  generateOptions\n  /*istanbul ignore end*/)(options, {\n    ignoreWhitespace: true\n  });\n  return wordDiff.diff(oldStr, newStr, options);\n}\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}","map":{"version":3,"names":["_base","_interopRequireDefault","require","_params","extendedWordChars","reWhitespace","wordDiff","equals","left","right","options","ignoreCase","toLowerCase","ignoreWhitespace","test","tokenize","value","tokens","split","i","length","splice","diffWords","oldStr","newStr","generateOptions","diff","diffWordsWithSpace"],"sources":["D:\\Workspace\\ocr_main\\ocr-frontend\\node_modules\\diff\\src\\diff\\word.js"],"sourcesContent":["import Diff from './base';\nimport {generateOptions} from '../util/params';\n\n// Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\nconst extendedWordChars = /^[a-zA-Z\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}]+$/u;\n\nconst reWhitespace = /\\S/;\n\nexport const wordDiff = new Diff();\nwordDiff.equals = function(left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n  return left === right || (this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right));\n};\nwordDiff.tokenize = function(value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  let tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/);\n\n  // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n  for (let i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2]\n          && extendedWordChars.test(tokens[i])\n          && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nexport function diffWords(oldStr, newStr, options) {\n  options = generateOptions(options, {ignoreWhitespace: true});\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nexport function diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n"],"mappings":";;;;;;;;;;;AAAA;AAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAA;AACA;AAAAC,OAAA,GAAAD,OAAA;AAAA;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAME,iBAAiB,GAAG,+DAA1B;AAEA,IAAMC,YAAY,GAAG,IAArB;AAEO,IAAMC,QAAQ,GAAG,IAAI;AAAAN;AAAA;AAAA;AAAA,wBAAJ,EAAjB;;;;;;AACPM,QAAQ,CAACC,MAAT,GAAkB,UAASC,IAAT,EAAeC,KAAf,EAAsB;EACtC,IAAI,KAAKC,OAAL,CAAaC,UAAjB,EAA6B;IAC3BH,IAAI,GAAGA,IAAI,CAACI,WAAL,EAAP;IACAH,KAAK,GAAGA,KAAK,CAACG,WAAN,EAAR;EACD;EACD,OAAOJ,IAAI,KAAKC,KAAT,IAAmB,KAAKC,OAAL,CAAaG,gBAAb,IAAiC,CAACR,YAAY,CAACS,IAAb,CAAkBN,IAAlB,CAAlC,IAA6D,CAACH,YAAY,CAACS,IAAb,CAAkBL,KAAlB,CAAxF;AACD,CAND;AAOAH,QAAQ,CAACS,QAAT,GAAoB,UAASC,KAAT,EAAgB;EAClC;EACA,IAAIC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAY,iCAAZ,CAAb,CAFkC,CAIlC;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;IAC1C;IACA,IAAI,CAACF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAP,IAAkBF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAxB,IACKf,iBAAiB,CAACU,IAAlB,CAAuBG,MAAM,CAACE,CAAD,CAA7B,CADL,IAEKf,iBAAiB,CAACU,IAAlB,CAAuBG,MAAM,CAACE,CAAC,GAAG,CAAL,CAA7B,CAFT,EAEgD;MAC9CF,MAAM,CAACE,CAAD,CAAN,IAAaF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAnB;MACAF,MAAM,CAACI,MAAP,CAAcF,CAAC,GAAG,CAAlB,EAAqB,CAArB;MACAA,CAAC;IACF;EACF;EAED,OAAOF,MAAP;AACD,CAjBD;AAmBO,SAASK,SAATA,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCd,OAAnC,EAA4C;EACjDA,OAAO,GAAG;EAAA;;EAAA;EAAAP;EAAA;EAAAsB;EAAA,yBAAgBf,OAAhB,EAAyB;IAACG,gBAAgB,EAAE;EAAnB,CAAzB,CAAV;EACA,OAAOP,QAAQ,CAACoB,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8Bd,OAA9B,CAAP;AACD;AAEM,SAASiB,kBAATA,CAA4BJ,MAA5B,EAAoCC,MAApC,EAA4Cd,OAA5C,EAAqD;EAC1D,OAAOJ,QAAQ,CAACoB,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8Bd,OAA9B,CAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
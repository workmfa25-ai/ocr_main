{"ast":null,"code":"/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcLineCount = calcLineCount;\nexports.merge = merge;\n\n/*istanbul ignore end*/\nvar /*istanbul ignore start*/\n_create = require(\"./create\")\n/*istanbul ignore end*/;\nvar /*istanbul ignore start*/\n_parse = require(\"./parse\")\n/*istanbul ignore end*/;\nvar /*istanbul ignore start*/\n_array = require(\"../util/array\")\n/*istanbul ignore end*/;\n\n/*istanbul ignore start*/\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/*istanbul ignore end*/\nfunction calcLineCount(hunk) {\n  /*istanbul ignore start*/\n  var _calcOldNewLineCount = /*istanbul ignore end*/\n    calcOldNewLineCount(hunk.lines),\n    oldLines = _calcOldNewLineCount.oldLines,\n    newLines = _calcOldNewLineCount.newLines;\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\nfunction merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n  ret.hunks = [];\n  var mineIndex = 0,\n    theirsIndex = 0,\n    mineOffset = 0,\n    theirsOffset = 0;\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    var mineCurrent = mine.hunks[mineIndex] || {\n        oldStart: Infinity\n      },\n      theirsCurrent = theirs.hunks[theirsIndex] || {\n        oldStart: Infinity\n      };\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      var mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n      ret.hunks.push(mergedHunk);\n    }\n  }\n  return ret;\n}\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n      return /*istanbul ignore start*/(0, /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      _parse\n      /*istanbul ignore end*/. /*istanbul ignore start*/\n      parsePatch\n      /*istanbul ignore end*/)(param)[0];\n    }\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n    return /*istanbul ignore start*/(0, /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _create\n    /*istanbul ignore end*/. /*istanbul ignore start*/\n    structuredPatch\n    /*istanbul ignore end*/)(undefined, undefined, base, param);\n  }\n  return param;\n}\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {\n      mine: mine,\n      theirs: theirs\n    };\n  }\n}\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n}\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart,\n    oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset,\n    newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  var mine = {\n      offset: mineOffset,\n      lines: mineLines,\n      index: 0\n    },\n    their = {\n      offset: theirOffset,\n      lines: theirLines,\n      index: 0\n    }; // Handle any leading content\n\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    var mineCurrent = mine.lines[mine.index],\n      theirCurrent = their.lines[their.index];\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      /*istanbul ignore start*/\n      var _hunk$lines;\n\n      /*istanbul ignore end*/\n      // Mine inserted\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines = /*istanbul ignore end*/\n      hunk.lines).push.apply(/*istanbul ignore start*/\n      _hunk$lines\n      /*istanbul ignore end*/, /*istanbul ignore start*/\n      _toConsumableArray(/*istanbul ignore end*/\n      collectChange(mine)));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      /*istanbul ignore start*/\n      var _hunk$lines2;\n\n      /*istanbul ignore end*/\n      // Theirs inserted\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines2 = /*istanbul ignore end*/\n      hunk.lines).push.apply(/*istanbul ignore start*/\n      _hunk$lines2\n      /*istanbul ignore end*/, /*istanbul ignore start*/\n      _toConsumableArray(/*istanbul ignore end*/\n      collectChange(their)));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  } // Now push anything that may be remaining\n\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n  calcLineCount(hunk);\n}\nfunction mutualChange(hunk, mine, their) {\n  var myChanges = collectChange(mine),\n    theirChanges = collectChange(their);\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (/*istanbul ignore start*/\n    (0, /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _array\n    /*istanbul ignore end*/. /*istanbul ignore start*/\n    arrayStartsWith\n    /*istanbul ignore end*/)(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      /*istanbul ignore start*/\n      var _hunk$lines3;\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines3 = /*istanbul ignore end*/\n      hunk.lines).push.apply(/*istanbul ignore start*/\n      _hunk$lines3\n      /*istanbul ignore end*/, /*istanbul ignore start*/\n      _toConsumableArray(/*istanbul ignore end*/\n      myChanges));\n      return;\n    } else if (/*istanbul ignore start*/\n    (0, /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    _array\n    /*istanbul ignore end*/. /*istanbul ignore start*/\n    arrayStartsWith\n    /*istanbul ignore end*/)(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      /*istanbul ignore start*/\n      var _hunk$lines4;\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n\n      /*istanbul ignore end*/\n\n      /*istanbul ignore start*/\n      (_hunk$lines4 = /*istanbul ignore end*/\n      hunk.lines).push.apply(/*istanbul ignore start*/\n      _hunk$lines4\n      /*istanbul ignore end*/, /*istanbul ignore start*/\n      _toConsumableArray(/*istanbul ignore end*/\n      theirChanges));\n      return;\n    }\n  } else if (/*istanbul ignore start*/\n  (0, /*istanbul ignore end*/\n\n  /*istanbul ignore start*/\n  _array\n  /*istanbul ignore end*/. /*istanbul ignore start*/\n  arrayEqual\n  /*istanbul ignore end*/)(myChanges, theirChanges)) {\n    /*istanbul ignore start*/\n    var _hunk$lines5;\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    (_hunk$lines5 = /*istanbul ignore end*/\n    hunk.lines).push.apply(/*istanbul ignore start*/\n    _hunk$lines5\n    /*istanbul ignore end*/, /*istanbul ignore start*/\n    _toConsumableArray(/*istanbul ignore end*/\n    myChanges));\n    return;\n  }\n  conflict(hunk, myChanges, theirChanges);\n}\nfunction removal(hunk, mine, their, swap) {\n  var myChanges = collectChange(mine),\n    theirChanges = collectContext(their, myChanges);\n  if (theirChanges.merged) {\n    /*istanbul ignore start*/\n    var _hunk$lines6;\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n\n    /*istanbul ignore end*/\n\n    /*istanbul ignore start*/\n    (_hunk$lines6 = /*istanbul ignore end*/\n    hunk.lines).push.apply(/*istanbul ignore start*/\n    _hunk$lines6\n    /*istanbul ignore end*/, /*istanbul ignore start*/\n    _toConsumableArray(/*istanbul ignore end*/\n    theirChanges.merged));\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\nfunction collectChange(state) {\n  var ret = [],\n    operation = state.lines[state.index][0];\n  while (state.index < state.lines.length) {\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n  return ret;\n}\nfunction collectContext(state, matchChanges) {\n  var changes = [],\n    merged = [],\n    matchIndex = 0,\n    contextChanges = false,\n    conflicted = false;\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n    var change = state.lines[state.index],\n      match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n    if (match[0] === '+') {\n      break;\n    }\n    contextChanges = contextChanges || change[0] !== ' ';\n    merged.push(match);\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n\n    if (change[0] === '+') {\n      conflicted = true;\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n    conflicted = true;\n  }\n  if (conflicted) {\n    return changes;\n  }\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n  return {\n    merged: merged,\n    changes: changes\n  };\n}\nfunction allRemoves(changes) {\n  return changes.reduce(function (prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (var i = 0; i < delta; i++) {\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n  state.index += delta;\n  return true;\n}\nfunction calcOldNewLineCount(lines) {\n  var oldLines = 0;\n  var newLines = 0;\n  lines.forEach(function (line) {\n    if (typeof line !== 'string') {\n      var myCount = calcOldNewLineCount(line.mine);\n      var theirCount = calcOldNewLineCount(line.theirs);\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n  return {\n    oldLines: oldLines,\n    newLines: newLines\n  };\n}","map":{"version":3,"names":["_create","require","_parse","_array","calcLineCount","hunk","_calcOldNewLineCount","calcOldNewLineCount","lines","oldLines","newLines","undefined","merge","mine","theirs","base","loadPatch","ret","index","newFileName","fileNameChanged","oldFileName","oldHeader","newHeader","selectField","hunks","mineIndex","theirsIndex","mineOffset","theirsOffset","length","mineCurrent","oldStart","Infinity","theirsCurrent","hunkBefore","push","cloneHunk","mergedHunk","Math","min","newStart","mergeLines","param","test","parsePatch","Error","structuredPatch","patch","conflict","check","offset","mineLines","theirOffset","theirLines","their","insertLeading","theirCurrent","mutualChange","_hunk$lines","apply","_toConsumableArray","collectChange","_hunk$lines2","removal","insertTrailing","myChanges","theirChanges","allRemoves","arrayStartsWith","skipRemoveSuperset","_hunk$lines3","_hunk$lines4","arrayEqual","_hunk$lines5","swap","collectContext","merged","_hunk$lines6","insert","line","state","operation","matchChanges","changes","matchIndex","contextChanges","conflicted","change","match","substr","reduce","prev","removeChanges","delta","i","changeContent","forEach","myCount","theirCount"],"sources":["D:\\Workspace\\ocr_main\\ocr-frontend\\node_modules\\diff\\src\\patch\\merge.js"],"sourcesContent":["import {structuredPatch} from './create';\nimport {parsePatch} from './parse';\n\nimport {arrayEqual, arrayStartsWith} from '../util/array';\n\nexport function calcLineCount(hunk) {\n  const {oldLines, newLines} = calcOldNewLineCount(hunk.lines);\n\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\n\nexport function merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n\n  let ret = {};\n\n  // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n\n  ret.hunks = [];\n\n  let mineIndex = 0,\n      theirsIndex = 0,\n      mineOffset = 0,\n      theirsOffset = 0;\n\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    let mineCurrent = mine.hunks[mineIndex] || {oldStart: Infinity},\n        theirsCurrent = theirs.hunks[theirsIndex] || {oldStart: Infinity};\n\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      let mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n\n      ret.hunks.push(mergedHunk);\n    }\n  }\n\n  return ret;\n}\n\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if ((/^@@/m).test(param) || ((/^Index:/m).test(param))) {\n      return parsePatch(param)[0];\n    }\n\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n    return structuredPatch(undefined, undefined, base, param);\n  }\n\n  return param;\n}\n\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\n\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {mine, theirs};\n  }\n}\n\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart\n    && (test.oldStart + test.oldLines) < check.oldStart;\n}\n\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart, oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset, newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\n\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  let mine = {offset: mineOffset, lines: mineLines, index: 0},\n      their = {offset: theirOffset, lines: theirLines, index: 0};\n\n  // Handle any leading content\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine);\n\n  // Now in the overlap content. Scan through and select the best changes from each.\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    let mineCurrent = mine.lines[mine.index],\n        theirCurrent = their.lines[their.index];\n\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+')\n        && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      // Mine inserted\n      hunk.lines.push(... collectChange(mine));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      // Theirs inserted\n      hunk.lines.push(... collectChange(their));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  }\n\n  // Now push anything that may be remaining\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n\n  calcLineCount(hunk);\n}\n\nfunction mutualChange(hunk, mine, their) {\n  let myChanges = collectChange(mine),\n      theirChanges = collectChange(their);\n\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (arrayStartsWith(myChanges, theirChanges)\n        && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      hunk.lines.push(... myChanges);\n      return;\n    } else if (arrayStartsWith(theirChanges, myChanges)\n        && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      hunk.lines.push(... theirChanges);\n      return;\n    }\n  } else if (arrayEqual(myChanges, theirChanges)) {\n    hunk.lines.push(... myChanges);\n    return;\n  }\n\n  conflict(hunk, myChanges, theirChanges);\n}\n\nfunction removal(hunk, mine, their, swap) {\n  let myChanges = collectChange(mine),\n      theirChanges = collectContext(their, myChanges);\n  if (theirChanges.merged) {\n    hunk.lines.push(... theirChanges.merged);\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\n\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\n\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    let line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    let line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\n\nfunction collectChange(state) {\n  let ret = [],\n      operation = state.lines[state.index][0];\n  while (state.index < state.lines.length) {\n    let line = state.lines[state.index];\n\n    // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n\n  return ret;\n}\nfunction collectContext(state, matchChanges) {\n  let changes = [],\n      merged = [],\n      matchIndex = 0,\n      contextChanges = false,\n      conflicted = false;\n  while (matchIndex < matchChanges.length\n        && state.index < state.lines.length) {\n    let change = state.lines[state.index],\n        match = matchChanges[matchIndex];\n\n    // Once we've hit our add, then we are done\n    if (match[0] === '+') {\n      break;\n    }\n\n    contextChanges = contextChanges || change[0] !== ' ';\n\n    merged.push(match);\n    matchIndex++;\n\n    // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n    if (change[0] === '+') {\n      conflicted = true;\n\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n\n  if ((matchChanges[matchIndex] || '')[0] === '+'\n      && contextChanges) {\n    conflicted = true;\n  }\n\n  if (conflicted) {\n    return changes;\n  }\n\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n\n  return {\n    merged,\n    changes\n  };\n}\n\nfunction allRemoves(changes) {\n  return changes.reduce(function(prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (let i = 0; i < delta; i++) {\n    let changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n\n  state.index += delta;\n  return true;\n}\n\nfunction calcOldNewLineCount(lines) {\n  let oldLines = 0;\n  let newLines = 0;\n\n  lines.forEach(function(line) {\n    if (typeof line !== 'string') {\n      let myCount = calcOldNewLineCount(line.mine);\n      let theirCount = calcOldNewLineCount(line.theirs);\n\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n\n  return {oldLines, newLines};\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAAA,OAAA,GAAAC,OAAA;AAAA;AACA;AAAAC,MAAA,GAAAD,OAAA;AAAA;AAEA;AAAAE,MAAA,GAAAF,OAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAASG,aAATA,CAAuBC,IAAvB,EAA6B;EAAA;EAAA,IAAAC,oBAAA;IACLC,mBAAmB,CAACF,IAAI,CAACG,KAAN,CADd;IAC3BC,QAD2B,GAAAH,oBAAA,CAC3BG,QAD2B;IACjBC,QADiB,GAAAJ,oBAAA,CACjBI,QADiB;EAGlC,IAAID,QAAQ,KAAKE,SAAjB,EAA4B;IAC1BN,IAAI,CAACI,QAAL,GAAgBA,QAAhB;EACD,CAFD,MAEO;IACL,OAAOJ,IAAI,CAACI,QAAZ;EACD;EAED,IAAIC,QAAQ,KAAKC,SAAjB,EAA4B;IAC1BN,IAAI,CAACK,QAAL,GAAgBA,QAAhB;EACD,CAFD,MAEO;IACL,OAAOL,IAAI,CAACK,QAAZ;EACD;AACF;AAEM,SAASE,KAATA,CAAeC,IAAf,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmC;EACxCF,IAAI,GAAGG,SAAS,CAACH,IAAD,EAAOE,IAAP,CAAhB;EACAD,MAAM,GAAGE,SAAS,CAACF,MAAD,EAASC,IAAT,CAAlB;EAEA,IAAIE,GAAG,GAAG,EAAV,CAJwC,CAMxC;EACA;EACA;;EACA,IAAIJ,IAAI,CAACK,KAAL,IAAcJ,MAAM,CAACI,KAAzB,EAAgC;IAC9BD,GAAG,CAACC,KAAJ,GAAYL,IAAI,CAACK,KAAL,IAAcJ,MAAM,CAACI,KAAjC;EACD;EAED,IAAIL,IAAI,CAACM,WAAL,IAAoBL,MAAM,CAACK,WAA/B,EAA4C;IAC1C,IAAI,CAACC,eAAe,CAACP,IAAD,CAApB,EAA4B;MAC1B;MACAI,GAAG,CAACI,WAAJ,GAAkBP,MAAM,CAACO,WAAP,IAAsBR,IAAI,CAACQ,WAA7C;MACAJ,GAAG,CAACE,WAAJ,GAAkBL,MAAM,CAACK,WAAP,IAAsBN,IAAI,CAACM,WAA7C;MACAF,GAAG,CAACK,SAAJ,GAAgBR,MAAM,CAACQ,SAAP,IAAoBT,IAAI,CAACS,SAAzC;MACAL,GAAG,CAACM,SAAJ,GAAgBT,MAAM,CAACS,SAAP,IAAoBV,IAAI,CAACU,SAAzC;IACD,CAND,MAMO,IAAI,CAACH,eAAe,CAACN,MAAD,CAApB,EAA8B;MACnC;MACAG,GAAG,CAACI,WAAJ,GAAkBR,IAAI,CAACQ,WAAvB;MACAJ,GAAG,CAACE,WAAJ,GAAkBN,IAAI,CAACM,WAAvB;MACAF,GAAG,CAACK,SAAJ,GAAgBT,IAAI,CAACS,SAArB;MACAL,GAAG,CAACM,SAAJ,GAAgBV,IAAI,CAACU,SAArB;IACD,CANM,MAMA;MACL;MACAN,GAAG,CAACI,WAAJ,GAAkBG,WAAW,CAACP,GAAD,EAAMJ,IAAI,CAACQ,WAAX,EAAwBP,MAAM,CAACO,WAA/B,CAA7B;MACAJ,GAAG,CAACE,WAAJ,GAAkBK,WAAW,CAACP,GAAD,EAAMJ,IAAI,CAACM,WAAX,EAAwBL,MAAM,CAACK,WAA/B,CAA7B;MACAF,GAAG,CAACK,SAAJ,GAAgBE,WAAW,CAACP,GAAD,EAAMJ,IAAI,CAACS,SAAX,EAAsBR,MAAM,CAACQ,SAA7B,CAA3B;MACAL,GAAG,CAACM,SAAJ,GAAgBC,WAAW,CAACP,GAAD,EAAMJ,IAAI,CAACU,SAAX,EAAsBT,MAAM,CAACS,SAA7B,CAA3B;IACD;EACF;EAEDN,GAAG,CAACQ,KAAJ,GAAY,EAAZ;EAEA,IAAIC,SAAS,GAAG,CAAhB;IACIC,WAAW,GAAG,CADlB;IAEIC,UAAU,GAAG,CAFjB;IAGIC,YAAY,GAAG,CAHnB;EAKA,OAAOH,SAAS,GAAGb,IAAI,CAACY,KAAL,CAAWK,MAAvB,IAAiCH,WAAW,GAAGb,MAAM,CAACW,KAAP,CAAaK,MAAnE,EAA2E;IACzE,IAAIC,WAAW,GAAGlB,IAAI,CAACY,KAAL,CAAWC,SAAX,KAAyB;QAACM,QAAQ,EAAEC;MAAX,CAA3C;MACIC,aAAa,GAAGpB,MAAM,CAACW,KAAP,CAAaE,WAAb,KAA6B;QAACK,QAAQ,EAAEC;MAAX,CADjD;IAGA,IAAIE,UAAU,CAACJ,WAAD,EAAcG,aAAd,CAAd,EAA4C;MAC1C;MACAjB,GAAG,CAACQ,KAAJ,CAAUW,IAAV,CAAeC,SAAS,CAACN,WAAD,EAAcH,UAAd,CAAxB;MACAF,SAAS;MACTG,YAAY,IAAIE,WAAW,CAACrB,QAAZ,GAAuBqB,WAAW,CAACtB,QAAnD;IACD,CALD,MAKO,IAAI0B,UAAU,CAACD,aAAD,EAAgBH,WAAhB,CAAd,EAA4C;MACjD;MACAd,GAAG,CAACQ,KAAJ,CAAUW,IAAV,CAAeC,SAAS,CAACH,aAAD,EAAgBL,YAAhB,CAAxB;MACAF,WAAW;MACXC,UAAU,IAAIM,aAAa,CAACxB,QAAd,GAAyBwB,aAAa,CAACzB,QAArD;IACD,CALM,MAKA;MACL;MACA,IAAI6B,UAAU,GAAG;QACfN,QAAQ,EAAEO,IAAI,CAACC,GAAL,CAAST,WAAW,CAACC,QAArB,EAA+BE,aAAa,CAACF,QAA7C,CADK;QAEfvB,QAAQ,EAAE,CAFK;QAGfgC,QAAQ,EAAEF,IAAI,CAACC,GAAL,CAAST,WAAW,CAACU,QAAZ,GAAuBb,UAAhC,EAA4CM,aAAa,CAACF,QAAd,GAAyBH,YAArE,CAHK;QAIfnB,QAAQ,EAAE,CAJK;QAKfF,KAAK,EAAE;MALQ,CAAjB;MAOAkC,UAAU,CAACJ,UAAD,EAAaP,WAAW,CAACC,QAAzB,EAAmCD,WAAW,CAACvB,KAA/C,EAAsD0B,aAAa,CAACF,QAApE,EAA8EE,aAAa,CAAC1B,KAA5F,CAAV;MACAmB,WAAW;MACXD,SAAS;MAETT,GAAG,CAACQ,KAAJ,CAAUW,IAAV,CAAeE,UAAf;IACD;EACF;EAED,OAAOrB,GAAP;AACD;AAED,SAASD,SAATA,CAAmB2B,KAAnB,EAA0B5B,IAA1B,EAAgC;EAC9B,IAAI,OAAO4B,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAK,MAAD,CAASC,IAAT,CAAcD,KAAd,KAA0B,UAAD,CAAaC,IAAb,CAAkBD,KAAlB,CAA7B,EAAwD;MACtD,OAAO;;MAAA;MAAAzC;MAAA;MAAA2C;MAAA,yBAAWF,KAAX,EAAkB,CAAlB;IACR;IAED,IAAI,CAAC5B,IAAL,EAAW;MACT,MAAM,IAAI+B,KAAJ,CAAU,kDAAV,CAAN;IACD;IACD,OAAO;;IAAA;IAAA9C;IAAA;IAAA+C;IAAA,yBAAgBpC,SAAhB,EAA2BA,SAA3B,EAAsCI,IAAtC,EAA4C4B,KAA5C;EACR;EAED,OAAOA,KAAP;AACD;AAED,SAASvB,eAATA,CAAyB4B,KAAzB,EAAgC;EAC9B,OAAOA,KAAK,CAAC7B,WAAN,IAAqB6B,KAAK,CAAC7B,WAAN,KAAsB6B,KAAK,CAAC3B,WAAxD;AACD;AAED,SAASG,WAATA,CAAqBN,KAArB,EAA4BL,IAA5B,EAAkCC,MAAlC,EAA0C;EACxC,IAAID,IAAI,KAAKC,MAAb,EAAqB;IACnB,OAAOD,IAAP;EACD,CAFD,MAEO;IACLK,KAAK,CAAC+B,QAAN,GAAiB,IAAjB;IACA,OAAO;MAACpC,IAAI,EAAJA,IAAD;MAAOC,MAAM,EAANA;IAAP,CAAP;EACD;AACF;AAED,SAASqB,UAATA,CAAoBS,IAApB,EAA0BM,KAA1B,EAAiC;EAC/B,OAAON,IAAI,CAACZ,QAAL,GAAgBkB,KAAK,CAAClB,QAAtB,IACDY,IAAI,CAACZ,QAAL,GAAgBY,IAAI,CAACnC,QAAtB,GAAkCyC,KAAK,CAAClB,QAD7C;AAED;AAED,SAASK,SAATA,CAAmBhC,IAAnB,EAAyB8C,MAAzB,EAAiC;EAC/B,OAAO;IACLnB,QAAQ,EAAE3B,IAAI,CAAC2B,QADV;IACoBvB,QAAQ,EAAEJ,IAAI,CAACI,QADnC;IAELgC,QAAQ,EAAEpC,IAAI,CAACoC,QAAL,GAAgBU,MAFrB;IAE6BzC,QAAQ,EAAEL,IAAI,CAACK,QAF5C;IAGLF,KAAK,EAAEH,IAAI,CAACG;EAHP,CAAP;AAKD;AAED,SAASkC,UAATA,CAAoBrC,IAApB,EAA0BuB,UAA1B,EAAsCwB,SAAtC,EAAiDC,WAAjD,EAA8DC,UAA9D,EAA0E;EACxE;EACA;EACA,IAAIzC,IAAI,GAAG;MAACsC,MAAM,EAAEvB,UAAT;MAAqBpB,KAAK,EAAE4C,SAA5B;MAAuClC,KAAK,EAAE;IAA9C,CAAX;IACIqC,KAAK,GAAG;MAACJ,MAAM,EAAEE,WAAT;MAAsB7C,KAAK,EAAE8C,UAA7B;MAAyCpC,KAAK,EAAE;IAAhD,CADZ,CAHwE,CAMxE;;EACAsC,aAAa,CAACnD,IAAD,EAAOQ,IAAP,EAAa0C,KAAb,CAAb;EACAC,aAAa,CAACnD,IAAD,EAAOkD,KAAP,EAAc1C,IAAd,CAAb,CARwE,CAUxE;;EACA,OAAOA,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACL,KAAL,CAAWsB,MAAxB,IAAkCyB,KAAK,CAACrC,KAAN,GAAcqC,KAAK,CAAC/C,KAAN,CAAYsB,MAAnE,EAA2E;IACzE,IAAIC,WAAW,GAAGlB,IAAI,CAACL,KAAL,CAAWK,IAAI,CAACK,KAAhB,CAAlB;MACIuC,YAAY,GAAGF,KAAK,CAAC/C,KAAN,CAAY+C,KAAK,CAACrC,KAAlB,CADnB;IAGA,IAAI,CAACa,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAnB,IAA0BA,WAAW,CAAC,CAAD,CAAX,KAAmB,GAA9C,MACI0B,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,IAA2BA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GADnD,CAAJ,EAC6D;MAC3D;MACAC,YAAY,CAACrD,IAAD,EAAOQ,IAAP,EAAa0C,KAAb,CAAZ;IACD,CAJD,MAIO,IAAIxB,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAnB,IAA0B0B,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAAlD,EAAuD;MAAA;MAAA,IAAAE,WAAA;;MAAA;MAC5D;;MACA;;MAAA;;MAAA;MAAA,CAAAA,WAAA;MAAAtD,IAAI,CAACG,KAAL,EAAW4B,IAAX,CAAAwB,KAAA;MAAAD;MAAA;MAAAE,kBAAA;MAAoBC,aAAa,CAACjD,IAAD,CAAjC;IACD,CAHM,MAGA,IAAI4C,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,IAA2B1B,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAlD,EAAuD;MAAA;MAAA,IAAAgC,YAAA;;MAAA;MAC5D;;MACA;;MAAA;;MAAA;MAAA,CAAAA,YAAA;MAAA1D,IAAI,CAACG,KAAL,EAAW4B,IAAX,CAAAwB,KAAA;MAAAG;MAAA;MAAAF,kBAAA;MAAoBC,aAAa,CAACP,KAAD,CAAjC;IACD,CAHM,MAGA,IAAIxB,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAnB,IAA0B0B,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAAlD,EAAuD;MAC5D;MACAO,OAAO,CAAC3D,IAAD,EAAOQ,IAAP,EAAa0C,KAAb,CAAP;IACD,CAHM,MAGA,IAAIE,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,IAA2B1B,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAlD,EAAuD;MAC5D;MACAiC,OAAO,CAAC3D,IAAD,EAAOkD,KAAP,EAAc1C,IAAd,EAAoB,IAApB,CAAP;IACD,CAHM,MAGA,IAAIkB,WAAW,KAAK0B,YAApB,EAAkC;MACvC;MACApD,IAAI,CAACG,KAAL,CAAW4B,IAAX,CAAgBL,WAAhB;MACAlB,IAAI,CAACK,KAAL;MACAqC,KAAK,CAACrC,KAAN;IACD,CALM,MAKA;MACL;MACA+B,QAAQ,CAAC5C,IAAD,EAAOyD,aAAa,CAACjD,IAAD,CAApB,EAA4BiD,aAAa,CAACP,KAAD,CAAzC,CAAR;IACD;EACF,CAxCuE,CA0CxE;;EACAU,cAAc,CAAC5D,IAAD,EAAOQ,IAAP,CAAd;EACAoD,cAAc,CAAC5D,IAAD,EAAOkD,KAAP,CAAd;EAEAnD,aAAa,CAACC,IAAD,CAAb;AACD;AAED,SAASqD,YAATA,CAAsBrD,IAAtB,EAA4BQ,IAA5B,EAAkC0C,KAAlC,EAAyC;EACvC,IAAIW,SAAS,GAAGJ,aAAa,CAACjD,IAAD,CAA7B;IACIsD,YAAY,GAAGL,aAAa,CAACP,KAAD,CADhC;EAGA,IAAIa,UAAU,CAACF,SAAD,CAAV,IAAyBE,UAAU,CAACD,YAAD,CAAvC,EAAuD;IACrD;IACA,IAAI;IAAA;;IAAA;IAAAhE;IAAA;IAAAkE;IAAA,yBAAgBH,SAAhB,EAA2BC,YAA3B,KACGG,kBAAkB,CAACf,KAAD,EAAQW,SAAR,EAAmBA,SAAS,CAACpC,MAAV,GAAmBqC,YAAY,CAACrC,MAAnD,CADzB,EACqF;MAAA;MAAA,IAAAyC,YAAA;;MAAA;;MACnF;;MAAA;;MAAA;MAAA,CAAAA,YAAA;MAAAlE,IAAI,CAACG,KAAL,EAAW4B,IAAX,CAAAwB,KAAA;MAAAW;MAAA;MAAAV,kBAAA;MAAoBK,SAApB;MACA;IACD,CAJD,MAIO,IAAI;IAAA;;IAAA;IAAA/D;IAAA;IAAAkE;IAAA,yBAAgBF,YAAhB,EAA8BD,SAA9B,KACJI,kBAAkB,CAACzD,IAAD,EAAOsD,YAAP,EAAqBA,YAAY,CAACrC,MAAb,GAAsBoC,SAAS,CAACpC,MAArD,CADlB,EACgF;MAAA;MAAA,IAAA0C,YAAA;;MAAA;;MACrF;;MAAA;;MAAA;MAAA,CAAAA,YAAA;MAAAnE,IAAI,CAACG,KAAL,EAAW4B,IAAX,CAAAwB,KAAA;MAAAY;MAAA;MAAAX,kBAAA;MAAoBM,YAApB;MACA;IACD;EACF,CAXD,MAWO,IAAI;EAAA;;EAAA;EAAAhE;EAAA;EAAAsE;EAAA,yBAAWP,SAAX,EAAsBC,YAAtB,CAAJ,EAAyC;IAAA;IAAA,IAAAO,YAAA;;IAAA;;IAC9C;;IAAA;;IAAA;IAAA,CAAAA,YAAA;IAAArE,IAAI,CAACG,KAAL,EAAW4B,IAAX,CAAAwB,KAAA;IAAAc;IAAA;IAAAb,kBAAA;IAAoBK,SAApB;IACA;EACD;EAEDjB,QAAQ,CAAC5C,IAAD,EAAO6D,SAAP,EAAkBC,YAAlB,CAAR;AACD;AAED,SAASH,OAATA,CAAiB3D,IAAjB,EAAuBQ,IAAvB,EAA6B0C,KAA7B,EAAoCoB,IAApC,EAA0C;EACxC,IAAIT,SAAS,GAAGJ,aAAa,CAACjD,IAAD,CAA7B;IACIsD,YAAY,GAAGS,cAAc,CAACrB,KAAD,EAAQW,SAAR,CADjC;EAEA,IAAIC,YAAY,CAACU,MAAjB,EAAyB;IAAA;IAAA,IAAAC,YAAA;;IAAA;;IACvB;;IAAA;;IAAA;IAAA,CAAAA,YAAA;IAAAzE,IAAI,CAACG,KAAL,EAAW4B,IAAX,CAAAwB,KAAA;IAAAkB;IAAA;IAAAjB,kBAAA;IAAoBM,YAAY,CAACU,MAAjC;EACD,CAFD,MAEO;IACL5B,QAAQ,CAAC5C,IAAD,EAAOsE,IAAI,GAAGR,YAAH,GAAkBD,SAA7B,EAAwCS,IAAI,GAAGT,SAAH,GAAeC,YAA3D,CAAR;EACD;AACF;AAED,SAASlB,QAATA,CAAkB5C,IAAlB,EAAwBQ,IAAxB,EAA8B0C,KAA9B,EAAqC;EACnClD,IAAI,CAAC4C,QAAL,GAAgB,IAAhB;EACA5C,IAAI,CAACG,KAAL,CAAW4B,IAAX,CAAgB;IACda,QAAQ,EAAE,IADI;IAEdpC,IAAI,EAAEA,IAFQ;IAGdC,MAAM,EAAEyC;EAHM,CAAhB;AAKD;AAED,SAASC,aAATA,CAAuBnD,IAAvB,EAA6B0E,MAA7B,EAAqCxB,KAArC,EAA4C;EAC1C,OAAOwB,MAAM,CAAC5B,MAAP,GAAgBI,KAAK,CAACJ,MAAtB,IAAgC4B,MAAM,CAAC7D,KAAP,GAAe6D,MAAM,CAACvE,KAAP,CAAasB,MAAnE,EAA2E;IACzE,IAAIkD,IAAI,GAAGD,MAAM,CAACvE,KAAP,CAAauE,MAAM,CAAC7D,KAAP,EAAb,CAAX;IACAb,IAAI,CAACG,KAAL,CAAW4B,IAAX,CAAgB4C,IAAhB;IACAD,MAAM,CAAC5B,MAAP;EACD;AACF;AACD,SAASc,cAATA,CAAwB5D,IAAxB,EAA8B0E,MAA9B,EAAsC;EACpC,OAAOA,MAAM,CAAC7D,KAAP,GAAe6D,MAAM,CAACvE,KAAP,CAAasB,MAAnC,EAA2C;IACzC,IAAIkD,IAAI,GAAGD,MAAM,CAACvE,KAAP,CAAauE,MAAM,CAAC7D,KAAP,EAAb,CAAX;IACAb,IAAI,CAACG,KAAL,CAAW4B,IAAX,CAAgB4C,IAAhB;EACD;AACF;AAED,SAASlB,aAATA,CAAuBmB,KAAvB,EAA8B;EAC5B,IAAIhE,GAAG,GAAG,EAAV;IACIiE,SAAS,GAAGD,KAAK,CAACzE,KAAN,CAAYyE,KAAK,CAAC/D,KAAlB,EAAyB,CAAzB,CADhB;EAEA,OAAO+D,KAAK,CAAC/D,KAAN,GAAc+D,KAAK,CAACzE,KAAN,CAAYsB,MAAjC,EAAyC;IACvC,IAAIkD,IAAI,GAAGC,KAAK,CAACzE,KAAN,CAAYyE,KAAK,CAAC/D,KAAlB,CAAX,CADuC,CAGvC;;IACA,IAAIgE,SAAS,KAAK,GAAd,IAAqBF,IAAI,CAAC,CAAD,CAAJ,KAAY,GAArC,EAA0C;MACxCE,SAAS,GAAG,GAAZ;IACD;IAED,IAAIA,SAAS,KAAKF,IAAI,CAAC,CAAD,CAAtB,EAA2B;MACzB/D,GAAG,CAACmB,IAAJ,CAAS4C,IAAT;MACAC,KAAK,CAAC/D,KAAN;IACD,CAHD,MAGO;MACL;IACD;EACF;EAED,OAAOD,GAAP;AACD;AACD,SAAS2D,cAATA,CAAwBK,KAAxB,EAA+BE,YAA/B,EAA6C;EAC3C,IAAIC,OAAO,GAAG,EAAd;IACIP,MAAM,GAAG,EADb;IAEIQ,UAAU,GAAG,CAFjB;IAGIC,cAAc,GAAG,KAHrB;IAIIC,UAAU,GAAG,KAJjB;EAKA,OAAOF,UAAU,GAAGF,YAAY,CAACrD,MAA1B,IACEmD,KAAK,CAAC/D,KAAN,GAAc+D,KAAK,CAACzE,KAAN,CAAYsB,MADnC,EAC2C;IACzC,IAAI0D,MAAM,GAAGP,KAAK,CAACzE,KAAN,CAAYyE,KAAK,CAAC/D,KAAlB,CAAb;MACIuE,KAAK,GAAGN,YAAY,CAACE,UAAD,CADxB,CADyC,CAIzC;;IACA,IAAII,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;MACpB;IACD;IAEDH,cAAc,GAAGA,cAAc,IAAIE,MAAM,CAAC,CAAD,CAAN,KAAc,GAAjD;IAEAX,MAAM,CAACzC,IAAP,CAAYqD,KAAZ;IACAJ,UAAU,GAZ+B,CAczC;IACA;;IACA,IAAIG,MAAM,CAAC,CAAD,CAAN,KAAc,GAAlB,EAAuB;MACrBD,UAAU,GAAG,IAAb;MAEA,OAAOC,MAAM,CAAC,CAAD,CAAN,KAAc,GAArB,EAA0B;QACxBJ,OAAO,CAAChD,IAAR,CAAaoD,MAAb;QACAA,MAAM,GAAGP,KAAK,CAACzE,KAAN,CAAY,EAAEyE,KAAK,CAAC/D,KAApB,CAAT;MACD;IACF;IAED,IAAIuE,KAAK,CAACC,MAAN,CAAa,CAAb,MAAoBF,MAAM,CAACE,MAAP,CAAc,CAAd,CAAxB,EAA0C;MACxCN,OAAO,CAAChD,IAAR,CAAaoD,MAAb;MACAP,KAAK,CAAC/D,KAAN;IACD,CAHD,MAGO;MACLqE,UAAU,GAAG,IAAb;IACD;EACF;EAED,IAAI,CAACJ,YAAY,CAACE,UAAD,CAAZ,IAA4B,EAA7B,EAAiC,CAAjC,MAAwC,GAAxC,IACGC,cADP,EACuB;IACrBC,UAAU,GAAG,IAAb;EACD;EAED,IAAIA,UAAJ,EAAgB;IACd,OAAOH,OAAP;EACD;EAED,OAAOC,UAAU,GAAGF,YAAY,CAACrD,MAAjC,EAAyC;IACvC+C,MAAM,CAACzC,IAAP,CAAY+C,YAAY,CAACE,UAAU,EAAX,CAAxB;EACD;EAED,OAAO;IACLR,MAAM,EAANA,MADK;IAELO,OAAO,EAAPA;EAFK,CAAP;AAID;AAED,SAAShB,UAATA,CAAoBgB,OAApB,EAA6B;EAC3B,OAAOA,OAAO,CAACO,MAAR,CAAe,UAASC,IAAT,EAAeJ,MAAf,EAAuB;IAC3C,OAAOI,IAAI,IAAIJ,MAAM,CAAC,CAAD,CAAN,KAAc,GAA7B;EACD,CAFM,EAEJ,IAFI,CAAP;AAGD;AACD,SAASlB,kBAATA,CAA4BW,KAA5B,EAAmCY,aAAnC,EAAkDC,KAAlD,EAAyD;EACvD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAApB,EAA2BC,CAAC,EAA5B,EAAgC;IAC9B,IAAIC,aAAa,GAAGH,aAAa,CAACA,aAAa,CAAC/D,MAAd,GAAuBgE,KAAvB,GAA+BC,CAAhC,CAAb,CAAgDL,MAAhD,CAAuD,CAAvD,CAApB;IACA,IAAIT,KAAK,CAACzE,KAAN,CAAYyE,KAAK,CAAC/D,KAAN,GAAc6E,CAA1B,MAAiC,MAAMC,aAA3C,EAA0D;MACxD,OAAO,KAAP;IACD;EACF;EAEDf,KAAK,CAAC/D,KAAN,IAAe4E,KAAf;EACA,OAAO,IAAP;AACD;AAED,SAASvF,mBAATA,CAA6BC,KAA7B,EAAoC;EAClC,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,QAAQ,GAAG,CAAf;EAEAF,KAAK,CAACyF,OAAN,CAAc,UAASjB,IAAT,EAAe;IAC3B,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC5B,IAAIkB,OAAO,GAAG3F,mBAAmB,CAACyE,IAAI,CAACnE,IAAN,CAAjC;MACA,IAAIsF,UAAU,GAAG5F,mBAAmB,CAACyE,IAAI,CAAClE,MAAN,CAApC;MAEA,IAAIL,QAAQ,KAAKE,SAAjB,EAA4B;QAC1B,IAAIuF,OAAO,CAACzF,QAAR,KAAqB0F,UAAU,CAAC1F,QAApC,EAA8C;UAC5CA,QAAQ,IAAIyF,OAAO,CAACzF,QAApB;QACD,CAFD,MAEO;UACLA,QAAQ,GAAGE,SAAX;QACD;MACF;MAED,IAAID,QAAQ,KAAKC,SAAjB,EAA4B;QAC1B,IAAIuF,OAAO,CAACxF,QAAR,KAAqByF,UAAU,CAACzF,QAApC,EAA8C;UAC5CA,QAAQ,IAAIwF,OAAO,CAACxF,QAApB;QACD,CAFD,MAEO;UACLA,QAAQ,GAAGC,SAAX;QACD;MACF;IACF,CAnBD,MAmBO;MACL,IAAID,QAAQ,KAAKC,SAAb,KAA2BqE,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAA1D,CAAJ,EAAoE;QAClEtE,QAAQ;MACT;MACD,IAAID,QAAQ,KAAKE,SAAb,KAA2BqE,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAA1D,CAAJ,EAAoE;QAClEvE,QAAQ;MACT;IACF;EACF,CA5BD;EA8BA,OAAO;IAACA,QAAQ,EAARA,QAAD;IAAWC,QAAQ,EAARA;EAAX,CAAP;AACD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
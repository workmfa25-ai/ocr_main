{"ast":null,"code":"// Mock service for OCR processing\n// Will be replaced with actual API calls in production\n\n// Simulate OCR processing with mock data for development\nconst simulateOcrProcessing = file => {\n  return new Promise(resolve => {\n    // Simulate network delay\n    setTimeout(() => {\n      // Mock extracted content based on file type\n      let extractedContent = '';\n      if (file.type.includes('image')) {\n        extractedContent = `DOCUMENT CONTENT\n\nDocument Information\n\nID: DOC-2023-002\nTitle: Sample Image Document\nDate: 05/15/2023\nReference: REF-2023-002\nCategory: Image\nStatus: Active\n\nA. DESCRIPTION\n\n[Additional document description would appear here]`;\n      } else if (file.type === 'application/pdf') {\n        extractedContent = `DOCUMENT CONTENT\n\nDocument Information\n\nID: DOC-2023-003\nTitle: Sample PDF Document\nDate: 06/20/2023\nReference: REF-2023-003\nCategory: PDF\nStatus: Active\n\nA. DESCRIPTION\n\n[Additional document description would appear here]`;\n      } else {\n        extractedContent = `Sample extracted content for ${file.name}\\nThis is a simulation of OCR processing.\\nThe actual content would depend on the file contents.`;\n      }\n      resolve({\n        success: true,\n        extractedContent,\n        confidence: 0.92,\n        processingTimeMs: 1243\n      });\n    }, 2000);\n  });\n};\n\n// Function to upload a file and process it with OCR\nexport const processDocument = async (file, documentType) => {\n  try {\n    // This would be an API call in a real application\n    return await simulateOcrProcessing(file);\n  } catch (error) {\n    console.error('Error processing document:', error);\n    throw error;\n  }\n};\n\n// Function to get a list of processed documents\nexport const getDocumentsList = async () => {\n  // This would be an API call in a real application\n  // In a real implementation, this would be wrapped in try-catch\n  return [{\n    id: 1,\n    fileName: 'sample1.pdf',\n    documentType: 'application/pdf',\n    createdAt: '2025-07-15T06:07:02.151026Z'\n  }, {\n    id: 2,\n    fileName: 'sample1.pdf',\n    documentType: 'application/pdf',\n    createdAt: '2025-07-15T06:11:18.521557Z'\n  }, {\n    id: 3,\n    fileName: 'sample1.png',\n    documentType: 'image/png',\n    createdAt: '2025-07-15T07:50:46.833785Z'\n  }, {\n    id: 4,\n    fileName: 'sample1.png',\n    documentType: 'image/png',\n    createdAt: '2025-07-15T07:51:37.414427Z'\n  }, {\n    id: 5,\n    fileName: 'sample1.png',\n    documentType: 'image/png',\n    createdAt: '2025-07-15T07:52:44.203495Z'\n  }];\n};\n\n// Function to get a specific document by ID\nexport const getDocumentById = async documentId => {\n  try {\n    // This would be an API call in a real application\n    return {\n      id: documentId,\n      fileName: 'sample1.pdf',\n      documentType: 'application/pdf',\n      createdAt: '2025-07-28T07:58:20.261236Z',\n      originalContent: 'DOCUMENT CONTENT\\n\\nDocument ID: DOC-2023-001\\nTitle: Sample Document\\nDate: 02/10/2023\\nReference: REF-2023-001\\nCategory: General\\nStatus: Active',\n      extractedContent: 'DOCUMENT CONTENT\\n\\nDocument Information\\n\\nID: DOC-2023-001\\nTitle: Sample Document\\nDate: 02/10/2023\\nReference: REF-2023-001\\nCategory: General\\nStatus: Active',\n      confidence: 0.89\n    };\n  } catch (error) {\n    console.error(`Error fetching document with ID ${documentId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["simulateOcrProcessing","file","Promise","resolve","setTimeout","extractedContent","type","includes","name","success","confidence","processingTimeMs","processDocument","documentType","error","console","getDocumentsList","id","fileName","createdAt","getDocumentById","documentId","originalContent"],"sources":["D:/Workspace/ocr_main/ocr-frontend/src/services/ocrService.js"],"sourcesContent":["// Mock service for OCR processing\n// Will be replaced with actual API calls in production\n\n// Simulate OCR processing with mock data for development\nconst simulateOcrProcessing = (file) => {\n  return new Promise((resolve) => {\n    // Simulate network delay\n    setTimeout(() => {\n      // Mock extracted content based on file type\n      let extractedContent = '';\n      \n      if (file.type.includes('image')) {\n        extractedContent = `DOCUMENT CONTENT\n\nDocument Information\n\nID: DOC-2023-002\nTitle: Sample Image Document\nDate: 05/15/2023\nReference: REF-2023-002\nCategory: Image\nStatus: Active\n\nA. DESCRIPTION\n\n[Additional document description would appear here]`;\n      } else if (file.type === 'application/pdf') {\n        extractedContent = `DOCUMENT CONTENT\n\nDocument Information\n\nID: DOC-2023-003\nTitle: Sample PDF Document\nDate: 06/20/2023\nReference: REF-2023-003\nCategory: PDF\nStatus: Active\n\nA. DESCRIPTION\n\n[Additional document description would appear here]`;\n      } else {\n        extractedContent = `Sample extracted content for ${file.name}\\nThis is a simulation of OCR processing.\\nThe actual content would depend on the file contents.`;\n      }\n      \n      resolve({\n        success: true,\n        extractedContent,\n        confidence: 0.92,\n        processingTimeMs: 1243\n      });\n    }, 2000);\n  });\n};\n\n// Function to upload a file and process it with OCR\nexport const processDocument = async (file, documentType) => {\n  try {\n    // This would be an API call in a real application\n    return await simulateOcrProcessing(file);\n  } catch (error) {\n    console.error('Error processing document:', error);\n    throw error;\n  }\n};\n\n// Function to get a list of processed documents\nexport const getDocumentsList = async () => {\n  // This would be an API call in a real application\n  // In a real implementation, this would be wrapped in try-catch\n  return [\n    {\n      id: 1,\n      fileName: 'sample1.pdf',\n      documentType: 'application/pdf',\n      createdAt: '2025-07-15T06:07:02.151026Z'\n    },\n    {\n      id: 2,\n      fileName: 'sample1.pdf',\n      documentType: 'application/pdf',\n      createdAt: '2025-07-15T06:11:18.521557Z'\n    },\n    {\n      id: 3,\n      fileName: 'sample1.png',\n      documentType: 'image/png',\n      createdAt: '2025-07-15T07:50:46.833785Z'\n    },\n    {\n      id: 4,\n      fileName: 'sample1.png',\n      documentType: 'image/png',\n      createdAt: '2025-07-15T07:51:37.414427Z'\n    },\n    {\n      id: 5,\n      fileName: 'sample1.png',\n      documentType: 'image/png',\n      createdAt: '2025-07-15T07:52:44.203495Z'\n    }\n  ];\n};\n\n// Function to get a specific document by ID\nexport const getDocumentById = async (documentId) => {\n  try {\n    // This would be an API call in a real application\n    return {\n      id: documentId,\n      fileName: 'sample1.pdf',\n      documentType: 'application/pdf',\n      createdAt: '2025-07-28T07:58:20.261236Z',\n      originalContent: 'DOCUMENT CONTENT\\n\\nDocument ID: DOC-2023-001\\nTitle: Sample Document\\nDate: 02/10/2023\\nReference: REF-2023-001\\nCategory: General\\nStatus: Active',\n      extractedContent: 'DOCUMENT CONTENT\\n\\nDocument Information\\n\\nID: DOC-2023-001\\nTitle: Sample Document\\nDate: 02/10/2023\\nReference: REF-2023-001\\nCategory: General\\nStatus: Active',\n      confidence: 0.89\n    };\n  } catch (error) {\n    console.error(`Error fetching document with ID ${documentId}:`, error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA;;AAEA;AACA,MAAMA,qBAAqB,GAAIC,IAAI,IAAK;EACtC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B;IACAC,UAAU,CAAC,MAAM;MACf;MACA,IAAIC,gBAAgB,GAAG,EAAE;MAEzB,IAAIJ,IAAI,CAACK,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC/BF,gBAAgB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;MAC9C,CAAC,MAAM,IAAIJ,IAAI,CAACK,IAAI,KAAK,iBAAiB,EAAE;QAC1CD,gBAAgB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;MAC9C,CAAC,MAAM;QACLA,gBAAgB,GAAG,gCAAgCJ,IAAI,CAACO,IAAI,kGAAkG;MAChK;MAEAL,OAAO,CAAC;QACNM,OAAO,EAAE,IAAI;QACbJ,gBAAgB;QAChBK,UAAU,EAAE,IAAI;QAChBC,gBAAgB,EAAE;MACpB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOX,IAAI,EAAEY,YAAY,KAAK;EAC3D,IAAI;IACF;IACA,OAAO,MAAMb,qBAAqB,CAACC,IAAI,CAAC;EAC1C,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C;EACA;EACA,OAAO,CACL;IACEC,EAAE,EAAE,CAAC;IACLC,QAAQ,EAAE,aAAa;IACvBL,YAAY,EAAE,iBAAiB;IAC/BM,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,QAAQ,EAAE,aAAa;IACvBL,YAAY,EAAE,iBAAiB;IAC/BM,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,QAAQ,EAAE,aAAa;IACvBL,YAAY,EAAE,WAAW;IACzBM,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,QAAQ,EAAE,aAAa;IACvBL,YAAY,EAAE,WAAW;IACzBM,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,QAAQ,EAAE,aAAa;IACvBL,YAAY,EAAE,WAAW;IACzBM,SAAS,EAAE;EACb,CAAC,CACF;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,UAAU,IAAK;EACnD,IAAI;IACF;IACA,OAAO;MACLJ,EAAE,EAAEI,UAAU;MACdH,QAAQ,EAAE,aAAa;MACvBL,YAAY,EAAE,iBAAiB;MAC/BM,SAAS,EAAE,6BAA6B;MACxCG,eAAe,EAAE,qJAAqJ;MACtKjB,gBAAgB,EAAE,oKAAoK;MACtLK,UAAU,EAAE;IACd,CAAC;EACH,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCO,UAAU,GAAG,EAAEP,KAAK,CAAC;IACtE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\ocr_main\\\\ocr-frontend\\\\src\\\\components\\\\ChatBot\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { FiSend, FiX, FiMessageSquare, FiUser, FiMessageCircle } from 'react-icons/fi';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = ({\n  isOpen,\n  onClose\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    type: 'bot',\n    content: 'Hello! I\\'m your OCR assistant. How can I help you with document processing today?',\n    timestamp: new Date()\n  }]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now(),\n      type: 'user',\n      content: inputMessage.trim(),\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n    try {\n      // TODO: Replace with your LLM API call\n      const response = await callLLMAPI(inputMessage.trim());\n      const botMessage = {\n        id: Date.now() + 1,\n        type: 'bot',\n        content: response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      const errorMessage = {\n        id: Date.now() + 1,\n        type: 'bot',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const callLLMAPI = async message => {\n    // TODO: Replace this with your actual LLM API integration\n    // Example structure for API call:\n    /*\r\n    const response = await fetch('YOUR_LLM_API_ENDPOINT', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer YOUR_API_KEY'\r\n      },\r\n      body: JSON.stringify({\r\n        message: message,\r\n        context: 'OCR Document Processing Assistant'\r\n      })\r\n    });\r\n    \r\n    const data = await response.json();\r\n    return data.response || data.message;\r\n    */\n\n    // Temporary mock response for testing\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return `I understand you said: \"${message}\". This is a placeholder response. Please integrate your LLM API here.`;\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  const formatTime = timestamp => {\n    return timestamp.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot-modal ${isOpen ? 'show' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-title\",\n          children: [/*#__PURE__*/_jsxDEV(FiMessageSquare, {\n            className: \"me-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), \"OCR Assistant\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          className: \"chatbot-close-btn\",\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(FiX, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.type === 'user' ? 'user-message' : 'bot-message'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: message.type === 'user' ? /*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 44\n            }, this) : /*#__PURE__*/_jsxDEV(FiMessageCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              children: message.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-time\",\n              children: formatTime(message.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-avatar\",\n            children: /*#__PURE__*/_jsxDEV(FiMessageCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              children: [/*#__PURE__*/_jsxDEV(Spinner, {\n                animation: \"border\",\n                size: \"sm\",\n                className: \"me-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this), \"Thinking...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          ref: inputRef,\n          as: \"textarea\",\n          rows: 1,\n          placeholder: \"Type your message...\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          onKeyPress: handleKeyPress,\n          disabled: isLoading,\n          className: \"chatbot-textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleSendMessage,\n          disabled: !inputMessage.trim() || isLoading,\n          className: \"chatbot-send-btn\",\n          children: /*#__PURE__*/_jsxDEV(FiSend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"pQsESfr7nO+KN/SCV8qmj2gaTss=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Button","Form","Spinner","FiSend","FiX","FiMessageSquare","FiUser","FiMessageCircle","jsxDEV","_jsxDEV","ChatBot","isOpen","onClose","_s","messages","setMessages","id","type","content","timestamp","Date","inputMessage","setInputMessage","isLoading","setIsLoading","messagesEndRef","inputRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","focus","handleSendMessage","trim","userMessage","now","prev","response","callLLMAPI","botMessage","error","errorMessage","message","Promise","resolve","setTimeout","handleKeyPress","e","key","shiftKey","preventDefault","formatTime","toLocaleTimeString","hour","minute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","map","animation","size","ref","Control","as","rows","placeholder","value","onChange","target","onKeyPress","disabled","_c","$RefreshReg$"],"sources":["D:/Workspace/ocr_main/ocr-frontend/src/components/ChatBot/ChatBot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Button, Form, Spinner } from 'react-bootstrap';\r\nimport { FiSend, FiX, FiMessageSquare, FiUser, FiMessageCircle } from 'react-icons/fi';\r\nimport './ChatBot.css';\r\n\r\nconst ChatBot = ({ isOpen, onClose }) => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      id: 1,\r\n      type: 'bot',\r\n      content: 'Hello! I\\'m your OCR assistant. How can I help you with document processing today?',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputMessage.trim() || isLoading) return;\r\n\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      content: inputMessage.trim(),\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputMessage('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // TODO: Replace with your LLM API call\r\n      const response = await callLLMAPI(inputMessage.trim());\r\n      \r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'bot',\r\n        content: response,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n    } catch (error) {\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error. Please try again.',\r\n        timestamp: new Date()\r\n      };\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const callLLMAPI = async (message) => {\r\n    // TODO: Replace this with your actual LLM API integration\r\n    // Example structure for API call:\r\n    /*\r\n    const response = await fetch('YOUR_LLM_API_ENDPOINT', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer YOUR_API_KEY'\r\n      },\r\n      body: JSON.stringify({\r\n        message: message,\r\n        context: 'OCR Document Processing Assistant'\r\n      })\r\n    });\r\n    \r\n    const data = await response.json();\r\n    return data.response || data.message;\r\n    */\r\n    \r\n    // Temporary mock response for testing\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    return `I understand you said: \"${message}\". This is a placeholder response. Please integrate your LLM API here.`;\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  const formatTime = (timestamp) => {\r\n    return timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  return (\r\n    <div className={`chatbot-modal ${isOpen ? 'show' : ''}`}>\r\n      <div className=\"chatbot-modal-content\">\r\n        <div className=\"chatbot-header\">\r\n          <div className=\"chatbot-title\">\r\n            <FiMessageSquare className=\"me-2\" />\r\n            OCR Assistant\r\n          </div>\r\n          <Button \r\n            variant=\"link\" \r\n            className=\"chatbot-close-btn\"\r\n            onClick={onClose}\r\n          >\r\n            <FiX />\r\n          </Button>\r\n        </div>\r\n        \r\n        <div className=\"chatbot-messages\">\r\n          {messages.map((message) => (\r\n            <div \r\n              key={message.id} \r\n              className={`message ${message.type === 'user' ? 'user-message' : 'bot-message'}`}\r\n            >\r\n              <div className=\"message-avatar\">\r\n                {message.type === 'user' ? <FiUser /> : <FiMessageCircle />}\r\n              </div>\r\n              <div className=\"message-content\">\r\n                <div className=\"message-text\">{message.content}</div>\r\n                <div className=\"message-time\">{formatTime(message.timestamp)}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          \r\n          {isLoading && (\r\n            <div className=\"message bot-message\">\r\n              <div className=\"message-avatar\">\r\n                <FiMessageCircle />\r\n              </div>\r\n              <div className=\"message-content\">\r\n                <div className=\"message-text\">\r\n                  <Spinner animation=\"border\" size=\"sm\" className=\"me-2\" />\r\n                  Thinking...\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n        \r\n        <div className=\"chatbot-input\">\r\n          <Form.Control\r\n            ref={inputRef}\r\n            as=\"textarea\"\r\n            rows={1}\r\n            placeholder=\"Type your message...\"\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            disabled={isLoading}\r\n            className=\"chatbot-textarea\"\r\n          />\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={handleSendMessage}\r\n            disabled={!inputMessage.trim() || isLoading}\r\n            className=\"chatbot-send-btn\"\r\n          >\r\n            <FiSend />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
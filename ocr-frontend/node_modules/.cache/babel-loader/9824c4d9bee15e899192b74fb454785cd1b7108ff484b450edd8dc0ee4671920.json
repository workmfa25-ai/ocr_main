{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DiffMethod = exports.LineNumberPrefix = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst React = __importStar(require(\"react\"));\nconst classnames_1 = __importDefault(require(\"classnames\"));\nconst compute_lines_1 = require(\"./compute-lines\");\nObject.defineProperty(exports, \"DiffMethod\", {\n  enumerable: true,\n  get: function () {\n    return compute_lines_1.DiffMethod;\n  }\n});\nconst styles_1 = __importDefault(require(\"./styles\"));\nconst compute_hidden_blocks_1 = require(\"./compute-hidden-blocks\");\nconst m = require('memoize-one');\nconst memoize = m.default || m;\nvar LineNumberPrefix;\n(function (LineNumberPrefix) {\n  LineNumberPrefix[\"LEFT\"] = \"L\";\n  LineNumberPrefix[\"RIGHT\"] = \"R\";\n})(LineNumberPrefix || (exports.LineNumberPrefix = LineNumberPrefix = {}));\nclass DiffViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * Resets code block expand to the initial stage. Will be exposed to the parent component via\n     * refs.\n     */\n    this.resetCodeBlocks = () => {\n      if (this.state.expandedBlocks.length > 0) {\n        this.setState({\n          expandedBlocks: []\n        });\n        return true;\n      }\n      return false;\n    };\n    /**\n     * Pushes the target expanded code block to the state. During the re-render,\n     * this value is used to expand/fold unmodified code.\n     */\n    this.onBlockExpand = id => {\n      const prevState = this.state.expandedBlocks.slice();\n      prevState.push(id);\n      this.setState({\n        expandedBlocks: prevState\n      });\n    };\n    /**\n     * Computes final styles for the diff viewer. It combines the default styles with the user\n     * supplied overrides. The computed styles are cached with performance in mind.\n     *\n     * @param styles User supplied style overrides.\n     */\n    this.computeStyles = memoize(styles_1.default);\n    /**\n     * Returns a function with clicked line number in the closure. Returns an no-op function when no\n     * onLineNumberClick handler is supplied.\n     *\n     * @param id Line id of a line.\n     */\n    this.onLineNumberClickProxy = id => {\n      if (this.props.onLineNumberClick) {\n        return e => this.props.onLineNumberClick(id, e);\n      }\n      return () => {};\n    };\n    /**\n     * Maps over the word diff and constructs the required React elements to show word diff.\n     *\n     * @param diffArray Word diff information derived from line information.\n     * @param renderer Optional renderer to format diff words. Useful for syntax highlighting.\n     */\n    this.renderWordDiff = (diffArray, renderer) => {\n      return diffArray.map((wordDiff, i) => {\n        return (0, jsx_runtime_1.jsx)(\"span\", {\n          className: (0, classnames_1.default)(this.styles.wordDiff, {\n            [this.styles.wordAdded]: wordDiff.type === compute_lines_1.DiffType.ADDED,\n            [this.styles.wordRemoved]: wordDiff.type === compute_lines_1.DiffType.REMOVED\n          }),\n          children: renderer ? renderer(wordDiff.value) : wordDiff.value\n        }, i);\n      });\n    };\n    /**\n     * Maps over the line diff and constructs the required react elements to show line diff. It calls\n     * renderWordDiff when encountering word diff. This takes care of both inline and split view line\n     * renders.\n     *\n     * @param lineNumber Line number of the current line.\n     * @param type Type of diff of the current line.\n     * @param prefix Unique id to prefix with the line numbers.\n     * @param value Content of the line. It can be a string or a word diff array.\n     * @param additionalLineNumber Additional line number to be shown. Useful for rendering inline\n     *  diff view. Right line number will be passed as additionalLineNumber.\n     * @param additionalPrefix Similar to prefix but for additional line number.\n     */\n    this.renderLine = (lineNumber, type, prefix, value, additionalLineNumber, additionalPrefix) => {\n      const lineNumberTemplate = `${prefix}-${lineNumber}`;\n      const additionalLineNumberTemplate = `${additionalPrefix}-${additionalLineNumber}`;\n      const highlightLine = this.props.highlightLines.includes(lineNumberTemplate) || this.props.highlightLines.includes(additionalLineNumberTemplate);\n      const added = type === compute_lines_1.DiffType.ADDED;\n      const removed = type === compute_lines_1.DiffType.REMOVED;\n      const changed = type === compute_lines_1.DiffType.CHANGED;\n      let content;\n      if (Array.isArray(value)) {\n        content = this.renderWordDiff(value, this.props.renderContent);\n      } else if (this.props.renderContent) {\n        content = this.props.renderContent(value);\n      } else {\n        content = value;\n      }\n      return (0, jsx_runtime_1.jsxs)(React.Fragment, {\n        children: [!this.props.hideLineNumbers && (0, jsx_runtime_1.jsx)(\"td\", {\n          onClick: lineNumber && this.onLineNumberClickProxy(lineNumberTemplate),\n          className: (0, classnames_1.default)(this.styles.gutter, {\n            [this.styles.emptyGutter]: !lineNumber,\n            [this.styles.diffAdded]: added,\n            [this.styles.diffRemoved]: removed,\n            [this.styles.diffChanged]: changed,\n            [this.styles.highlightedGutter]: highlightLine\n          }),\n          children: (0, jsx_runtime_1.jsx)(\"pre\", {\n            className: this.styles.lineNumber,\n            children: lineNumber\n          })\n        }), !this.props.splitView && !this.props.hideLineNumbers && (0, jsx_runtime_1.jsx)(\"td\", {\n          onClick: additionalLineNumber && this.onLineNumberClickProxy(additionalLineNumberTemplate),\n          className: (0, classnames_1.default)(this.styles.gutter, {\n            [this.styles.emptyGutter]: !additionalLineNumber,\n            [this.styles.diffAdded]: added,\n            [this.styles.diffRemoved]: removed,\n            [this.styles.diffChanged]: changed,\n            [this.styles.highlightedGutter]: highlightLine\n          }),\n          children: (0, jsx_runtime_1.jsx)(\"pre\", {\n            className: this.styles.lineNumber,\n            children: additionalLineNumber\n          })\n        }), this.props.renderGutter ? this.props.renderGutter({\n          lineNumber,\n          type,\n          prefix,\n          value,\n          additionalLineNumber,\n          additionalPrefix,\n          styles: this.styles\n        }) : null, !this.props.hideMarkers && (0, jsx_runtime_1.jsx)(\"td\", {\n          className: (0, classnames_1.default)(this.styles.marker, {\n            [this.styles.emptyLine]: !content,\n            [this.styles.diffAdded]: added,\n            [this.styles.diffRemoved]: removed,\n            [this.styles.diffChanged]: changed,\n            [this.styles.highlightedLine]: highlightLine\n          }),\n          children: (0, jsx_runtime_1.jsxs)(\"pre\", {\n            children: [added && '+', removed && '-']\n          })\n        }), (0, jsx_runtime_1.jsx)(\"td\", {\n          className: (0, classnames_1.default)(this.styles.content, {\n            [this.styles.emptyLine]: !content,\n            [this.styles.diffAdded]: added,\n            [this.styles.diffRemoved]: removed,\n            [this.styles.diffChanged]: changed,\n            [this.styles.highlightedLine]: highlightLine\n          }),\n          children: (0, jsx_runtime_1.jsx)(\"pre\", {\n            className: this.styles.contentText,\n            children: content\n          })\n        })]\n      });\n    };\n    /**\n     * Generates lines for split view.\n     *\n     * @param obj Line diff information.\n     * @param obj.left Life diff information for the left pane of the split view.\n     * @param obj.right Life diff information for the right pane of the split view.\n     * @param index React key for the lines.\n     */\n    this.renderSplitView = ({\n      left,\n      right\n    }, index) => {\n      return (0, jsx_runtime_1.jsxs)(\"tr\", {\n        className: this.styles.line,\n        children: [this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value), this.renderLine(right.lineNumber, right.type, LineNumberPrefix.RIGHT, right.value)]\n      }, index);\n    };\n    /**\n     * Generates lines for inline view.\n     *\n     * @param obj Line diff information.\n     * @param obj.left Life diff information for the added section of the inline view.\n     * @param obj.right Life diff information for the removed section of the inline view.\n     * @param index React key for the lines.\n     */\n    this.renderInlineView = ({\n      left,\n      right\n    }, index) => {\n      let content;\n      if (left.type === compute_lines_1.DiffType.REMOVED && right.type === compute_lines_1.DiffType.ADDED) {\n        return (0, jsx_runtime_1.jsxs)(React.Fragment, {\n          children: [(0, jsx_runtime_1.jsx)(\"tr\", {\n            className: this.styles.line,\n            children: this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null)\n          }), (0, jsx_runtime_1.jsx)(\"tr\", {\n            className: this.styles.line,\n            children: this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber)\n          })]\n        }, index);\n      }\n      if (left.type === compute_lines_1.DiffType.REMOVED) {\n        content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null);\n      }\n      if (left.type === compute_lines_1.DiffType.DEFAULT) {\n        content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, right.lineNumber, LineNumberPrefix.RIGHT);\n      }\n      if (right.type === compute_lines_1.DiffType.ADDED) {\n        content = this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber);\n      }\n      return (0, jsx_runtime_1.jsx)(\"tr\", {\n        className: this.styles.line,\n        children: content\n      }, index);\n    };\n    /**\n     * Returns a function with clicked block number in the closure.\n     *\n     * @param id Cold fold block id.\n     */\n    this.onBlockClickProxy = id => () => this.onBlockExpand(id);\n    /**\n     * Generates cold fold block. It also uses the custom message renderer when available to show\n     * cold fold messages.\n     *\n     * @param num Number of skipped lines between two blocks.\n     * @param blockNumber Code fold block id.\n     * @param leftBlockLineNumber First left line number after the current code fold block.\n     * @param rightBlockLineNumber First right line number after the current code fold block.\n     */\n    this.renderSkippedLineIndicator = (num, blockNumber, leftBlockLineNumber, rightBlockLineNumber) => {\n      const {\n        hideLineNumbers,\n        splitView\n      } = this.props;\n      const message = this.props.codeFoldMessageRenderer ? this.props.codeFoldMessageRenderer(num, leftBlockLineNumber, rightBlockLineNumber) : (0, jsx_runtime_1.jsxs)(\"pre\", {\n        className: this.styles.codeFoldContent,\n        children: [\"Expand \", num, \" lines ...\"]\n      });\n      const content = (0, jsx_runtime_1.jsx)(\"td\", {\n        children: (0, jsx_runtime_1.jsx)(\"a\", {\n          onClick: this.onBlockClickProxy(blockNumber),\n          tabIndex: 0,\n          children: message\n        })\n      });\n      const isUnifiedViewWithoutLineNumbers = !splitView && !hideLineNumbers;\n      return (0, jsx_runtime_1.jsxs)(\"tr\", {\n        className: this.styles.codeFold,\n        children: [!hideLineNumbers && (0, jsx_runtime_1.jsx)(\"td\", {\n          className: this.styles.codeFoldGutter\n        }), this.props.renderGutter ? (0, jsx_runtime_1.jsx)(\"td\", {\n          className: this.styles.codeFoldGutter\n        }) : null, (0, jsx_runtime_1.jsx)(\"td\", {\n          className: (0, classnames_1.default)({\n            [this.styles.codeFoldGutter]: isUnifiedViewWithoutLineNumbers\n          })\n        }), isUnifiedViewWithoutLineNumbers ? (0, jsx_runtime_1.jsxs)(React.Fragment, {\n          children: [(0, jsx_runtime_1.jsx)(\"td\", {}), content]\n        }) : (0, jsx_runtime_1.jsxs)(React.Fragment, {\n          children: [content, this.props.renderGutter ? (0, jsx_runtime_1.jsx)(\"td\", {}) : null, (0, jsx_runtime_1.jsx)(\"td\", {})]\n        }), (0, jsx_runtime_1.jsx)(\"td\", {}), (0, jsx_runtime_1.jsx)(\"td\", {})]\n      }, `${leftBlockLineNumber}-${rightBlockLineNumber}`);\n    };\n    /**\n     * Generates the entire diff view.\n     */\n    this.renderDiff = () => {\n      const {\n        oldValue,\n        newValue,\n        splitView,\n        disableWordDiff,\n        compareMethod,\n        linesOffset\n      } = this.props;\n      const {\n        lineInformation,\n        diffLines\n      } = (0, compute_lines_1.computeLineInformation)(oldValue, newValue, disableWordDiff, compareMethod, linesOffset, this.props.alwaysShowLines);\n      const extraLines = this.props.extraLinesSurroundingDiff < 0 ? 0 : Math.round(this.props.extraLinesSurroundingDiff);\n      const {\n        lineBlocks,\n        blocks\n      } = (0, compute_hidden_blocks_1.computeHiddenBlocks)(lineInformation, diffLines, extraLines);\n      return lineInformation.map((line, lineIndex) => {\n        if (this.props.showDiffOnly) {\n          const blockIndex = lineBlocks[lineIndex];\n          if (blockIndex !== undefined) {\n            const lastLineOfBlock = blocks[blockIndex].endLine === lineIndex;\n            if (!this.state.expandedBlocks.includes(blockIndex) && lastLineOfBlock) {\n              return (0, jsx_runtime_1.jsx)(React.Fragment, {\n                children: this.renderSkippedLineIndicator(blocks[blockIndex].lines, blockIndex, line.left.lineNumber, line.right.lineNumber)\n              }, lineIndex);\n            } else if (!this.state.expandedBlocks.includes(blockIndex)) {\n              return null;\n            }\n          }\n        }\n        const diffNodes = splitView ? this.renderSplitView(line, lineIndex) : this.renderInlineView(line, lineIndex);\n        return diffNodes;\n      });\n    };\n    this.render = () => {\n      const {\n        oldValue,\n        newValue,\n        useDarkTheme,\n        leftTitle,\n        rightTitle,\n        splitView,\n        hideLineNumbers,\n        hideMarkers,\n        nonce\n      } = this.props;\n      if (this.props.compareMethod !== compute_lines_1.DiffMethod.JSON) {\n        if (typeof oldValue !== 'string' || typeof newValue !== 'string') {\n          throw Error('\"oldValue\" and \"newValue\" should be strings');\n        }\n      }\n      this.styles = this.computeStyles(this.props.styles, useDarkTheme, nonce);\n      const nodes = this.renderDiff();\n      let colSpanOnSplitView = hideLineNumbers ? 2 : 3;\n      let colSpanOnInlineView = hideLineNumbers ? 2 : 4;\n      if (hideMarkers) {\n        colSpanOnSplitView -= 1;\n        colSpanOnInlineView -= 1;\n      }\n      const columnExtension = this.props.renderGutter ? 1 : 0;\n      const title = (leftTitle || rightTitle) && (0, jsx_runtime_1.jsxs)(\"tr\", {\n        children: [(0, jsx_runtime_1.jsx)(\"td\", {\n          colSpan: (splitView ? colSpanOnSplitView : colSpanOnInlineView) + columnExtension,\n          className: this.styles.titleBlock,\n          children: (0, jsx_runtime_1.jsx)(\"pre\", {\n            className: this.styles.contentText,\n            children: leftTitle\n          })\n        }), splitView && (0, jsx_runtime_1.jsx)(\"td\", {\n          colSpan: colSpanOnSplitView + columnExtension,\n          className: this.styles.titleBlock,\n          children: (0, jsx_runtime_1.jsx)(\"pre\", {\n            className: this.styles.contentText,\n            children: rightTitle\n          })\n        })]\n      });\n      return (0, jsx_runtime_1.jsx)(\"table\", {\n        className: (0, classnames_1.default)(this.styles.diffContainer, {\n          [this.styles.splitView]: splitView\n        }),\n        children: (0, jsx_runtime_1.jsxs)(\"tbody\", {\n          children: [title, nodes]\n        })\n      });\n    };\n    this.state = {\n      expandedBlocks: []\n    };\n  }\n}\nDiffViewer.defaultProps = {\n  oldValue: '',\n  newValue: '',\n  splitView: true,\n  highlightLines: [],\n  disableWordDiff: false,\n  compareMethod: compute_lines_1.DiffMethod.CHARS,\n  styles: {},\n  hideLineNumbers: false,\n  hideMarkers: false,\n  extraLinesSurroundingDiff: 3,\n  showDiffOnly: true,\n  useDarkTheme: false,\n  linesOffset: 0,\n  nonce: ''\n};\nexports.default = DiffViewer;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","DiffMethod","LineNumberPrefix","jsx_runtime_1","require","React","classnames_1","compute_lines_1","styles_1","compute_hidden_blocks_1","memoize","default","DiffViewer","Component","constructor","props","resetCodeBlocks","state","expandedBlocks","length","setState","onBlockExpand","id","prevState","slice","push","computeStyles","onLineNumberClickProxy","onLineNumberClick","e","renderWordDiff","diffArray","renderer","map","wordDiff","i","jsx","className","styles","wordAdded","type","DiffType","ADDED","wordRemoved","REMOVED","children","renderLine","lineNumber","prefix","additionalLineNumber","additionalPrefix","lineNumberTemplate","additionalLineNumberTemplate","highlightLine","highlightLines","includes","added","removed","changed","CHANGED","content","Array","isArray","renderContent","jsxs","Fragment","hideLineNumbers","onClick","gutter","emptyGutter","diffAdded","diffRemoved","diffChanged","highlightedGutter","splitView","renderGutter","hideMarkers","marker","emptyLine","highlightedLine","contentText","renderSplitView","left","right","index","line","LEFT","RIGHT","renderInlineView","DEFAULT","onBlockClickProxy","renderSkippedLineIndicator","num","blockNumber","leftBlockLineNumber","rightBlockLineNumber","message","codeFoldMessageRenderer","codeFoldContent","tabIndex","isUnifiedViewWithoutLineNumbers","codeFold","codeFoldGutter","renderDiff","oldValue","newValue","disableWordDiff","compareMethod","linesOffset","lineInformation","diffLines","computeLineInformation","alwaysShowLines","extraLines","extraLinesSurroundingDiff","Math","round","lineBlocks","blocks","computeHiddenBlocks","lineIndex","showDiffOnly","blockIndex","lastLineOfBlock","endLine","lines","diffNodes","render","useDarkTheme","leftTitle","rightTitle","nonce","JSON","Error","nodes","colSpanOnSplitView","colSpanOnInlineView","columnExtension","title","colSpan","titleBlock","diffContainer","defaultProps","CHARS"],"sources":["D:/Workspace/ocr_main/ocr-frontend/node_modules/react-diff-viewer-continued/lib/src/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiffMethod = exports.LineNumberPrefix = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst React = __importStar(require(\"react\"));\nconst classnames_1 = __importDefault(require(\"classnames\"));\nconst compute_lines_1 = require(\"./compute-lines\");\nObject.defineProperty(exports, \"DiffMethod\", { enumerable: true, get: function () { return compute_lines_1.DiffMethod; } });\nconst styles_1 = __importDefault(require(\"./styles\"));\nconst compute_hidden_blocks_1 = require(\"./compute-hidden-blocks\");\nconst m = require('memoize-one');\nconst memoize = m.default || m;\nvar LineNumberPrefix;\n(function (LineNumberPrefix) {\n    LineNumberPrefix[\"LEFT\"] = \"L\";\n    LineNumberPrefix[\"RIGHT\"] = \"R\";\n})(LineNumberPrefix || (exports.LineNumberPrefix = LineNumberPrefix = {}));\nclass DiffViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        /**\n         * Resets code block expand to the initial stage. Will be exposed to the parent component via\n         * refs.\n         */\n        this.resetCodeBlocks = () => {\n            if (this.state.expandedBlocks.length > 0) {\n                this.setState({\n                    expandedBlocks: [],\n                });\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Pushes the target expanded code block to the state. During the re-render,\n         * this value is used to expand/fold unmodified code.\n         */\n        this.onBlockExpand = (id) => {\n            const prevState = this.state.expandedBlocks.slice();\n            prevState.push(id);\n            this.setState({\n                expandedBlocks: prevState,\n            });\n        };\n        /**\n         * Computes final styles for the diff viewer. It combines the default styles with the user\n         * supplied overrides. The computed styles are cached with performance in mind.\n         *\n         * @param styles User supplied style overrides.\n         */\n        this.computeStyles = memoize(styles_1.default);\n        /**\n         * Returns a function with clicked line number in the closure. Returns an no-op function when no\n         * onLineNumberClick handler is supplied.\n         *\n         * @param id Line id of a line.\n         */\n        this.onLineNumberClickProxy = (id) => {\n            if (this.props.onLineNumberClick) {\n                return (e) => this.props.onLineNumberClick(id, e);\n            }\n            return () => { };\n        };\n        /**\n         * Maps over the word diff and constructs the required React elements to show word diff.\n         *\n         * @param diffArray Word diff information derived from line information.\n         * @param renderer Optional renderer to format diff words. Useful for syntax highlighting.\n         */\n        this.renderWordDiff = (diffArray, renderer) => {\n            return diffArray.map((wordDiff, i) => {\n                return ((0, jsx_runtime_1.jsx)(\"span\", { className: (0, classnames_1.default)(this.styles.wordDiff, {\n                        [this.styles.wordAdded]: wordDiff.type === compute_lines_1.DiffType.ADDED,\n                        [this.styles.wordRemoved]: wordDiff.type === compute_lines_1.DiffType.REMOVED,\n                    }), children: renderer ? renderer(wordDiff.value) : wordDiff.value }, i));\n            });\n        };\n        /**\n         * Maps over the line diff and constructs the required react elements to show line diff. It calls\n         * renderWordDiff when encountering word diff. This takes care of both inline and split view line\n         * renders.\n         *\n         * @param lineNumber Line number of the current line.\n         * @param type Type of diff of the current line.\n         * @param prefix Unique id to prefix with the line numbers.\n         * @param value Content of the line. It can be a string or a word diff array.\n         * @param additionalLineNumber Additional line number to be shown. Useful for rendering inline\n         *  diff view. Right line number will be passed as additionalLineNumber.\n         * @param additionalPrefix Similar to prefix but for additional line number.\n         */\n        this.renderLine = (lineNumber, type, prefix, value, additionalLineNumber, additionalPrefix) => {\n            const lineNumberTemplate = `${prefix}-${lineNumber}`;\n            const additionalLineNumberTemplate = `${additionalPrefix}-${additionalLineNumber}`;\n            const highlightLine = this.props.highlightLines.includes(lineNumberTemplate) ||\n                this.props.highlightLines.includes(additionalLineNumberTemplate);\n            const added = type === compute_lines_1.DiffType.ADDED;\n            const removed = type === compute_lines_1.DiffType.REMOVED;\n            const changed = type === compute_lines_1.DiffType.CHANGED;\n            let content;\n            if (Array.isArray(value)) {\n                content = this.renderWordDiff(value, this.props.renderContent);\n            }\n            else if (this.props.renderContent) {\n                content = this.props.renderContent(value);\n            }\n            else {\n                content = value;\n            }\n            return ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [!this.props.hideLineNumbers && ((0, jsx_runtime_1.jsx)(\"td\", { onClick: lineNumber && this.onLineNumberClickProxy(lineNumberTemplate), className: (0, classnames_1.default)(this.styles.gutter, {\n                            [this.styles.emptyGutter]: !lineNumber,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedGutter]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.lineNumber, children: lineNumber }) })), !this.props.splitView && !this.props.hideLineNumbers && ((0, jsx_runtime_1.jsx)(\"td\", { onClick: additionalLineNumber &&\n                            this.onLineNumberClickProxy(additionalLineNumberTemplate), className: (0, classnames_1.default)(this.styles.gutter, {\n                            [this.styles.emptyGutter]: !additionalLineNumber,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedGutter]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.lineNumber, children: additionalLineNumber }) })), this.props.renderGutter\n                        ? this.props.renderGutter({\n                            lineNumber,\n                            type,\n                            prefix,\n                            value,\n                            additionalLineNumber,\n                            additionalPrefix,\n                            styles: this.styles,\n                        })\n                        : null, !this.props.hideMarkers && ((0, jsx_runtime_1.jsx)(\"td\", { className: (0, classnames_1.default)(this.styles.marker, {\n                            [this.styles.emptyLine]: !content,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedLine]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsxs)(\"pre\", { children: [added && '+', removed && '-'] }) })), (0, jsx_runtime_1.jsx)(\"td\", { className: (0, classnames_1.default)(this.styles.content, {\n                            [this.styles.emptyLine]: !content,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedLine]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.contentText, children: content }) })] }));\n        };\n        /**\n         * Generates lines for split view.\n         *\n         * @param obj Line diff information.\n         * @param obj.left Life diff information for the left pane of the split view.\n         * @param obj.right Life diff information for the right pane of the split view.\n         * @param index React key for the lines.\n         */\n        this.renderSplitView = ({ left, right }, index) => {\n            return ((0, jsx_runtime_1.jsxs)(\"tr\", { className: this.styles.line, children: [this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value), this.renderLine(right.lineNumber, right.type, LineNumberPrefix.RIGHT, right.value)] }, index));\n        };\n        /**\n         * Generates lines for inline view.\n         *\n         * @param obj Line diff information.\n         * @param obj.left Life diff information for the added section of the inline view.\n         * @param obj.right Life diff information for the removed section of the inline view.\n         * @param index React key for the lines.\n         */\n        this.renderInlineView = ({ left, right }, index) => {\n            let content;\n            if (left.type === compute_lines_1.DiffType.REMOVED && right.type === compute_lines_1.DiffType.ADDED) {\n                return ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [(0, jsx_runtime_1.jsx)(\"tr\", { className: this.styles.line, children: this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null) }), (0, jsx_runtime_1.jsx)(\"tr\", { className: this.styles.line, children: this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber) })] }, index));\n            }\n            if (left.type === compute_lines_1.DiffType.REMOVED) {\n                content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null);\n            }\n            if (left.type === compute_lines_1.DiffType.DEFAULT) {\n                content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, right.lineNumber, LineNumberPrefix.RIGHT);\n            }\n            if (right.type === compute_lines_1.DiffType.ADDED) {\n                content = this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber);\n            }\n            return ((0, jsx_runtime_1.jsx)(\"tr\", { className: this.styles.line, children: content }, index));\n        };\n        /**\n         * Returns a function with clicked block number in the closure.\n         *\n         * @param id Cold fold block id.\n         */\n        this.onBlockClickProxy = (id) => () => this.onBlockExpand(id);\n        /**\n         * Generates cold fold block. It also uses the custom message renderer when available to show\n         * cold fold messages.\n         *\n         * @param num Number of skipped lines between two blocks.\n         * @param blockNumber Code fold block id.\n         * @param leftBlockLineNumber First left line number after the current code fold block.\n         * @param rightBlockLineNumber First right line number after the current code fold block.\n         */\n        this.renderSkippedLineIndicator = (num, blockNumber, leftBlockLineNumber, rightBlockLineNumber) => {\n            const { hideLineNumbers, splitView } = this.props;\n            const message = this.props.codeFoldMessageRenderer ? (this.props.codeFoldMessageRenderer(num, leftBlockLineNumber, rightBlockLineNumber)) : ((0, jsx_runtime_1.jsxs)(\"pre\", { className: this.styles.codeFoldContent, children: [\"Expand \", num, \" lines ...\"] }));\n            const content = ((0, jsx_runtime_1.jsx)(\"td\", { children: (0, jsx_runtime_1.jsx)(\"a\", { onClick: this.onBlockClickProxy(blockNumber), tabIndex: 0, children: message }) }));\n            const isUnifiedViewWithoutLineNumbers = !splitView && !hideLineNumbers;\n            return ((0, jsx_runtime_1.jsxs)(\"tr\", { className: this.styles.codeFold, children: [!hideLineNumbers && (0, jsx_runtime_1.jsx)(\"td\", { className: this.styles.codeFoldGutter }), this.props.renderGutter ? ((0, jsx_runtime_1.jsx)(\"td\", { className: this.styles.codeFoldGutter })) : null, (0, jsx_runtime_1.jsx)(\"td\", { className: (0, classnames_1.default)({\n                            [this.styles.codeFoldGutter]: isUnifiedViewWithoutLineNumbers,\n                        }) }), isUnifiedViewWithoutLineNumbers ? ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [(0, jsx_runtime_1.jsx)(\"td\", {}), content] })) : ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [content, this.props.renderGutter ? (0, jsx_runtime_1.jsx)(\"td\", {}) : null, (0, jsx_runtime_1.jsx)(\"td\", {})] })), (0, jsx_runtime_1.jsx)(\"td\", {}), (0, jsx_runtime_1.jsx)(\"td\", {})] }, `${leftBlockLineNumber}-${rightBlockLineNumber}`));\n        };\n        /**\n         * Generates the entire diff view.\n         */\n        this.renderDiff = () => {\n            const { oldValue, newValue, splitView, disableWordDiff, compareMethod, linesOffset, } = this.props;\n            const { lineInformation, diffLines } = (0, compute_lines_1.computeLineInformation)(oldValue, newValue, disableWordDiff, compareMethod, linesOffset, this.props.alwaysShowLines);\n            const extraLines = this.props.extraLinesSurroundingDiff < 0\n                ? 0\n                : Math.round(this.props.extraLinesSurroundingDiff);\n            const { lineBlocks, blocks } = (0, compute_hidden_blocks_1.computeHiddenBlocks)(lineInformation, diffLines, extraLines);\n            return lineInformation.map((line, lineIndex) => {\n                if (this.props.showDiffOnly) {\n                    const blockIndex = lineBlocks[lineIndex];\n                    if (blockIndex !== undefined) {\n                        const lastLineOfBlock = blocks[blockIndex].endLine === lineIndex;\n                        if (!this.state.expandedBlocks.includes(blockIndex) && lastLineOfBlock) {\n                            return ((0, jsx_runtime_1.jsx)(React.Fragment, { children: this.renderSkippedLineIndicator(blocks[blockIndex].lines, blockIndex, line.left.lineNumber, line.right.lineNumber) }, lineIndex));\n                        }\n                        else if (!this.state.expandedBlocks.includes(blockIndex)) {\n                            return null;\n                        }\n                    }\n                }\n                const diffNodes = splitView\n                    ? this.renderSplitView(line, lineIndex)\n                    : this.renderInlineView(line, lineIndex);\n                return diffNodes;\n            });\n        };\n        this.render = () => {\n            const { oldValue, newValue, useDarkTheme, leftTitle, rightTitle, splitView, hideLineNumbers, hideMarkers, nonce, } = this.props;\n            if (this.props.compareMethod !== compute_lines_1.DiffMethod.JSON) {\n                if (typeof oldValue !== 'string' || typeof newValue !== 'string') {\n                    throw Error('\"oldValue\" and \"newValue\" should be strings');\n                }\n            }\n            this.styles = this.computeStyles(this.props.styles, useDarkTheme, nonce);\n            const nodes = this.renderDiff();\n            let colSpanOnSplitView = hideLineNumbers ? 2 : 3;\n            let colSpanOnInlineView = hideLineNumbers ? 2 : 4;\n            if (hideMarkers) {\n                colSpanOnSplitView -= 1;\n                colSpanOnInlineView -= 1;\n            }\n            const columnExtension = this.props.renderGutter ? 1 : 0;\n            const title = (leftTitle || rightTitle) && ((0, jsx_runtime_1.jsxs)(\"tr\", { children: [(0, jsx_runtime_1.jsx)(\"td\", { colSpan: (splitView ? colSpanOnSplitView : colSpanOnInlineView) +\n                            columnExtension, className: this.styles.titleBlock, children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.contentText, children: leftTitle }) }), splitView && ((0, jsx_runtime_1.jsx)(\"td\", { colSpan: colSpanOnSplitView + columnExtension, className: this.styles.titleBlock, children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.contentText, children: rightTitle }) }))] }));\n            return ((0, jsx_runtime_1.jsx)(\"table\", { className: (0, classnames_1.default)(this.styles.diffContainer, {\n                    [this.styles.splitView]: splitView,\n                }), children: (0, jsx_runtime_1.jsxs)(\"tbody\", { children: [title, nodes] }) }));\n        };\n        this.state = {\n            expandedBlocks: [],\n        };\n    }\n}\nDiffViewer.defaultProps = {\n    oldValue: '',\n    newValue: '',\n    splitView: true,\n    highlightLines: [],\n    disableWordDiff: false,\n    compareMethod: compute_lines_1.DiffMethod.CHARS,\n    styles: {},\n    hideLineNumbers: false,\n    hideMarkers: false,\n    extraLinesSurroundingDiff: 3,\n    showDiffOnly: true,\n    useDarkTheme: false,\n    linesOffset: 0,\n    nonce: '',\n};\nexports.default = DiffViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}